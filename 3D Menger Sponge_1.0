<!DOCTYPE html>
<html lang="en">
<head>
     <style>
		body {
			margin: 0px;
			background-color: #000000;
			overflow: hidden;
		}
	</style>
     <script src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/109/three.min.js"></script>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<style>
		body, #container {
			overflow: hidden;
		}
	</style>
</head>
<body>
	<div id="container"></div>
	<script id="vertexShader" type="x-shader/x-vertex">
			void main() {
	        gl_Position = vec4(position,1.0) ;                
		} 
    
    </script>
	<script id="fragmentShader" type="x-shader/x-fragment">
		//============================================================
		//PUT YOUR GLSL CODE HERE
		//============================================================

precision mediump float;
uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

float basic_box(vec3 pos, vec3 b){
    vec3 d = abs(pos) - b;
    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
    //return min(max(d.x,max(d.y,d.z)),0.0) + length(max(sin(d),0.0));  
}

float map_menger5(vec3 p){

    float main_width_b = 4.0; //<4.0 outside/
    float inf = 50.0;

    float hole_x, hole_y, hole_z;
    float hole_width_b = main_width_b / 3.0;
    
    float menger = basic_box(p, vec3(main_width_b));  ////ðŸŒŸmenger = vec4(p, 4., 4. ,4.)ðŸŒŸ////
    
    for (int iter=0; iter<7; iter++){  ////ðŸŒŸchange the times of iteration, the numbers of squares  the distance of holesðŸŒŸ////

        float hole_distance = hole_width_b * 6.0;
 
        vec3 c = vec3(hole_distance);   ////ðŸŒŸthe size of holeðŸŒŸ////
        vec3 q = mod(p + vec3(hole_width_b), c) - vec3(hole_width_b);

        hole_x = basic_box(q, vec3(inf, hole_width_b, hole_width_b));
        hole_y = basic_box(q, vec3(hole_width_b, inf, hole_width_b));
        hole_z = basic_box(q, vec3(hole_width_b, hole_width_b, inf));

        hole_width_b = hole_width_b / 3.0;        // reduce hole size for next iter
        menger = max(max(max(menger, -hole_x), -hole_y), -hole_z); // subtract

    }
    return menger;
}

float trace(vec3 origin, vec3 ray){
    
    float t = 0.0;
    for (int i=0; i<32; ++i){  ////ðŸŒ«Ray Tracer Render definition//
        vec3 p = origin + ray * t;
        float d = map_menger5(p);
        t += d;
    }
    return t;
}

mat2 rotate(float theta){
    return mat2(cos(theta), -sin(theta), sin(theta), cos(theta));
}

void main( void ) {

    vec2 uv = gl_FragCoord.xy / resolution.xy;  // normalize coords
    uv = uv * 2.0 - 1.0;                      // convert coords from 0,1 to -1,1
    uv.x *= resolution.x/resolution.y;      // fix aspect
    
    vec3 ray = normalize(vec3(uv.x, uv.y, 1.0));
    vec3 origin = vec3(0.0,0.0,-4.0 -5.2*sin(time* 0.20));

    float theta;
    theta = time/ 5.0; // rotate speed
    //ray.yz *= rotate(theta);
    //ray.xy *= rotate(theta);
    //origin.yz *= rotate(theta);
    //origin.xy *= rotate(theta);
    
    float t = trace(origin, ray);    
    float fog = 1.1 / (t* 0.5);  //ðŸŒŸfogAmount is a value from 0 to 1.The mix function mixes the first 2 values. When fogAmount is 0 mix returns originalColor. Then fogAmount is 1 mix returns fogColor. In between 0 and 1 you get a percentage of both colors.brightnessðŸŒŸ//
    
    vec3 fc = vec3(fog) * vec3(0.8+0.2*sin(time* 0.1), 0.8+0.2*sin(time* 1.0),0.9+0.1*cos(time*1.0)); //ðŸŒŸgradient rampðŸŒŸ//
    gl_FragColor = vec4(fc,1.0);
}
 
	
		//============================================================
		//END OF GLSL CODE
		//============================================================
	</script>
	<script>
		//change the resolution here. 1 is highest
		var pixel_resolution = 1;
		var container, stats;
		var camera, scene, renderer;
		var uniforms;
		var mesh;
		init();
		animate();
		function init() {
			container = document.getElementById('container');
			camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000);
			camera.position.z = 2;
			camera.position.y = 0.5;
			camera.position.x = 0;
// 			camera.position.z = 1;
			scene = new THREE.Scene();
			var geometry = new THREE.PlaneGeometry(3,2,100,200);//
			uniforms = { time: { type: 'f', value: 1.0 }, resolution: { type: 'v2', value: new THREE.Vector2() }, mouse: {type: "v2", value: new THREE.Vector2()}};
			var material = new THREE.ShaderMaterial({ uniforms: uniforms, vertexShader: document.getElementById('vertexShader').textContent, fragmentShader: document.getElementById('fragmentShader').textContent });
			mesh = new THREE.Mesh(geometry, material);
			scene.add(mesh);
			renderer = new THREE.WebGLRenderer();
			//Hack here to change resolution 
			renderer.setPixelRatio(window.devicePixelRatio / pixel_resolution);
            //renderer.context.enable(renderer.context.DEPTH_TEST);
			container.appendChild(renderer.domElement);
			onWindowResize();
			window.addEventListener('resize', onWindowResize, false);
	        window.addEventListener('mousemove', onMouseMove, false);

		}
		function onWindowResize(event) {
			renderer.setSize(window.innerWidth, window.innerHeight);
			uniforms.resolution.value.x = renderer.domElement.width;
			uniforms.resolution.value.y = renderer.domElement.height;

		}
		function animate() {
			requestAnimationFrame(animate);
		    //mesh.rotation.x += 0.00005;
	        //mesh.rotation.y += 0.0001;
			render();
		}
		function onMouseMove( event ) {
        	uniforms.mouse.value.x = 2 * ( event.clientX / window.innerWidth );
 	        uniforms.mouse.value.y = 2 * ( 1-(event.clientY) / window.innerHeight
 	        );
        }
		function render() {
			uniforms.time.value += 0.01;
			renderer.render(scene, camera);
		}
	</script>
</body>
</html>
