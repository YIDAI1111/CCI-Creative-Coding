<!DOCTYPE html>
<html lang="en">
<head>
     <style>
		body {
			margin: 0px;
			background-color: #000000;
			overflow: hidden;
		}
	</style>
     <script src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/109/three.min.js"></script>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<style>
		body, #container {
			overflow: hidden;
		}
	</style>
</head>
<body>
	<div id="container"></div>
	<script id="vertexShader" type="x-shader/x-vertex">
			void main() {
	        gl_Position = vec4(position,1.0) ;                
		} 
    
    </script>
	<script id="fragmentShader" type="x-shader/x-fragment">
		//============================================================
		//PUT YOUR GLSL CODE HERE
		//============================================================

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

float sdBox(vec2 p, vec2 s) {
	//p = abs(p) - s*1.0;  
    p = abs(p) - s*(abs(sin(time))+1.0);
	return length(max(p, 0.0)) + min(max(p.x, p.y), 0.0);
}

float sierpinskiCarpet(vec2 p) {
	float s = 1.0;
  //float s = 3.0;
	float f  = 1.0 / 3.0;  // the middle square 控制大小？攝像機距離
	float d = sdBox(p, vec2(s));
	for (int i = 0; i < 4; i++) {
		d = max(d, -sdBox(p, vec2(f)) / s);
		p = abs(p);
		p -= f;
		p = abs(p);
		p -= f;
		p *= 3.0; // 改變外圍矩形的大小
		s *= 3.0; // 變化速率？	
	}
	return d;	
}

void main( void ) {
 
	vec2 p = (2.0 * gl_FragCoord.xy - resolution) / min(resolution.x, resolution.y); // uv moethod 把原點置換到屏幕中心
	
	float d = sierpinskiCarpet(p * 1.0); 
	//float d = sierpinskiCarpet(p * 1.0)*0.5; //distance from the center
    
    //vec3 c = d > 0.0 ? vec3(0.0) : vec3(1.0);
    
     vec3 c = d > 0.01*abs(sin(time * 5.)) ? vec3(0.0) : vec3(1.0);
   //vec3 c = d > 0.01*floor(sin(time * 5.)) ? vec3(0.0) : vec3(1.0);
   //vec3 c = d > 0.01*fract(sin(time * 5.)) ? vec3(0.0) : vec3(1.0);   
   // vec3 c = d > 0.01*abs(pow(time * 5.,0.0001)) ? vec3(0.0) : vec3(1.0);  //	?:selection   b ? n : m   returns n if b
	
	gl_FragColor = vec4(c, 1.0);

}


	
		//============================================================
		//END OF GLSL CODE
		//============================================================
        
        
	</script>
	<script>
		//change the resolution here. 1 is highest
		var pixel_resolution = 1;
		var container, stats;
		var camera, scene, renderer;
		var uniforms;
		var mesh;
		init();
		animate();
		function init() {
			container = document.getElementById('container');
			camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000);
			camera.position.z = 2;
			camera.position.y = 0.5;
			camera.position.x = 0;
// 			camera.position.z = 1;
			scene = new THREE.Scene();
			var geometry = new THREE.PlaneGeometry(3,2,100,200);//
			uniforms = { time: { type: 'f', value: 1.0 }, resolution: { type: 'v2', value: new THREE.Vector2() }, mouse: {type: "v2", value: new THREE.Vector2()}};
			var material = new THREE.ShaderMaterial({ uniforms: uniforms, vertexShader: document.getElementById('vertexShader').textContent, fragmentShader: document.getElementById('fragmentShader').textContent });
			mesh = new THREE.Mesh(geometry, material);
			scene.add(mesh);
			renderer = new THREE.WebGLRenderer();
			//Hack here to change resolution 
			renderer.setPixelRatio(window.devicePixelRatio / pixel_resolution);
            //renderer.context.enable(renderer.context.DEPTH_TEST);
			container.appendChild(renderer.domElement);
			onWindowResize();
			window.addEventListener('resize', onWindowResize, false);
	        window.addEventListener('mousemove', onMouseMove, false);

		}
		function onWindowResize(event) {
			renderer.setSize(window.innerWidth, window.innerHeight);
			uniforms.resolution.value.x = renderer.domElement.width;
			uniforms.resolution.value.y = renderer.domElement.height;

		}
		function animate() {
			requestAnimationFrame(animate);
		    //mesh.rotation.x += 0.00005;
	        //mesh.rotation.y += 0.0001;
			render();
		}
		function onMouseMove( event ) {
        	uniforms.mouse.value.x = 2 * ( event.clientX / window.innerWidth );
 	        uniforms.mouse.value.y = 2 * ( 1-(event.clientY) / window.innerHeight
 	        );
        }
		function render() {
			uniforms.time.value += 0.01;
			renderer.render(scene, camera);
		}
	</script>
</body>
</html>
